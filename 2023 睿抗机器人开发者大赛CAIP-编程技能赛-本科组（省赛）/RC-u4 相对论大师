

//未打印路径
#include<iostream>
#include <map>
#include <vector>
#include <queue>
using namespace std;

map<string ,int>mp;
vector<int> E[2010];
int vis[1001]={0};
int dis[1001]={0};
vector<int>father;
int dfs(int st,int ed){
    if(st==)
}
//bfs-最短路径
int bfs(int st, int ed){

    queue<int> q;
    q.push(st);
    vis[st]=1;
    dis[st]=0;
    while(!q.empty()){
        int DS=q.front();
        q.pop();
        //与队首相连的多条路径0->1;0->4....
        for(int i=0;i<E[DS].size();i++){
            int v=E[DS][i];
            if(vis[v])
                continue;
            q.push(v);
            vis[v]=1;
            dis[v]=dis[DS]+1;
            father[v]=DS;
        }
    }
    return dis[st];

}
int main(){
    int n;
    cin>>n;
    int id=0;
    for(int i=0;i<n;i++){
        string r, w;
        int x, y;
        cin>>r>>x>>w>>y;
        //1.存入map容器形成键值对；<YU 0>=1;<YU 1>=2;
        if(!mp.count(r+to_string(x))){
            if(x==0){
                mp[r+"0"]=++id;
                mp[r+"1"]=++id;
            }
            else if(x==1){
                mp[r+"1"]=++id;
                mp[r+"0"]=++id;
                
            }
        }
        if(!mp.count(w+to_string(y))){
            if(y==0){
                mp[w+"0"]=++id;
                mp[w+"1"]=++id;
            }
            else if(y==1){
                mp[w+"1"]=++id;
                mp[w+"0"]=++id;
                
            }
        }   
        //cout<<mp[r+to_string(x)]<<" "<<mp[w+to_string(y)]<<endl;
        //2.用vector容器构成单向表（E[1]=3）
        E[mp[r+to_string(x)]].push_back(mp[w+to_string(y)]);
        //枚举每一组
        for(int i=1;i<=id;i+2){
            bfs(i,i+1);
            bfs(i+1, i);//////为什么
        }
    }

    return 0;
}
